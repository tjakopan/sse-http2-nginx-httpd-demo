user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    upstream backend {
        server host.docker.internal:8080;
    }

    server {
        listen       443 ssl;
        http2        on;
        server_name  localhost;  # Update if using a domain name

        ssl_certificate     /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location /demo {
            proxy_pass         http://backend/demo;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            proxy_connect_timeout 30;
            proxy_read_timeout    30;
            proxy_send_timeout    30;
        }

        location /demo/sse {
            proxy_pass         http://backend/demo/sse;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;

            proxy_http_version  1.1;
            proxy_set_header    Connection "keep-alive";
            proxy_cache         off;

            proxy_connect_timeout 30;
            proxy_read_timeout    3600;
            proxy_send_timeout    3600;
        }
    }

    server {
      listen 80;
      server_name localhost;
      return 301 https://$host$request_uri;
    }
}
